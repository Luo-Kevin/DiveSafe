class Guide {
  AvailableStatus {
    Available {
      bookGuide / {
        doBookGuide();
      }-> Available;
      [availableForPeriod() <= 0] -> Taken;
    }
    Taken{}
  }
  
  // Method to count the number of days the guide is already taken
  // @author Siger Ma

  public int takenForPeriod() {
      int daysTaken = 0;
      List <Assignment> currentAssignments = getAssignments();

      for (Assignment assignment : currentAssignments) {
        int startDate = assignment.getStartDay();
        int endDate = assignment.getEndDay();
        daysTaken = daysTaken + (endDate - startDate);
      }

      return daysTaken;
  }
  
  // Method to count the number of days the guide is still available
  // @author Siger Ma
  
  public int availableForPeriod() {
    int numOfDaysAvailable = 0;
    int daysTaken = takenForPeriod();
    int numOfDaysInSeason = getDiveSafe().getNumDays();

    numOfDaysAvailable = numOfDaysInSeason - daysTaken;
    return numOfDaysAvailable;
  }

  // Method for the guides to be booked and be assigned to members
  // @author Siger Ma

  public void doBookGuide() {
    List<Member> currentMembers = getDiveSafe().getMembers();
    for (Member member : currentMembers) {
      member.assign(this);
    }
  }

}

class Member {
  MemberStatus {
    Unregistered {
      register -> Registered;
    }
    Registered {
      Unassigned {
        assign (Guide guide) / {
          doAssign(guide);
        }-> Assigned;
      }
      Assigned {
        pay -> Paid;
        cancelNoPenalty -> Unregistered;
        ban -> Banned;
      }
      Paid {
        start -> TripStart;
        cancelFiftyRefund -> Unregistered;
      }
      TripStart {
        finish / {
          doFinishTrip (member);
        } -> TripFinish;
        cancelTenRefund -> Unregistered;
      }
    }
    TripFinish{}
    Banned{}
  }

  // Method for the members to be assigned to their schedule and to their guide if they asked for one.
  // @author Siger Ma
  // @param guide Guide to be assigned to the member if he asked for one
  
  public void doAssign(Guide guide) {
    int numDaysRequest = getNumDays();
    boolean needGuide = getGuideRequired();
    if (!needGuide) {
      new Assignment(1, numDaysRequest, this, getDiveSafe());
    } else if (guide != null) {
      if (numDaysRequest <= guide.availableForPeriod()) {
        Assignment assignment = new Assignment(guide.takenForPeriod() + 1, guide.takenForPeriod() + numDaysRequest, this, diveSafe);
        assignment.setGuide(guide);
      }
    }
  }

  public void doFinishTrip(Member member) {

  }
}