class Guide {
  AvailableStatus {
    Available {
      bookGuide(Integer numOfDays) [availableForPeriod() >= numOfDays] -> Available;
      [availableForPeriod() == 0] -> Taken;
    }
    Taken{}
  }
  
  // @author Siger Ma
  // Method to count the number of days the guide is already taken
  public int takenForPeriod() {
      int daysTaken = 0;
      List <Assignment> currentAssignments = getAssignments();

      for (Assignment assignment : currentAssignments) {
        int startDate = assignment.getStartDay();
        int endDate = assignment.getEndDay();
        daysTaken = daysTaken + (endDate - startDate);
      }

      return daysTaken;
  }
  
  // @author Siger Ma
  // Method to count the number of days the guide is still available
  public int availableForPeriod() {
    int numOfDaysAvailable = 0;
    int daysTaken = takenForPeriod();
    int numOfDaysInSeason = getDiveSafe().getNumDays();

    numOfDaysAvailable = numOfDaysInSeason - daysTaken;
    return numOfDaysAvailable;
  }

}

class Member {
  MemberStatus {
    Unregistered {
      register -> Registered;        
    }
    Registered {
      Unassigned {
        assign -> Assigned;
      }
      Assigned {
        pay -> Paid;
        cancelNoPenalty -> Unregistered;
        ban -> Banned;
      }
      Paid {
        start -> TripStart;
        cancelFiftyRefund -> Unregistered;
      }
      TripStart {
        finish -> TripFinish;
        cancelTenRefund -> Unregistered;
      }
    }
    TripFinish{}
    Banned{}
  }
}