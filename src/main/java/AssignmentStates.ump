class Guide {
  AvailableStatus {
    Available {
      bookGuide / {
        doBookGuide();
      }-> Available;
      [availableForPeriod() <= 0] -> Taken;
    }
    Taken{}
  }
  
  // Method to count the number of days the guide is already taken
  // @author Siger Ma

  public int takenForPeriod() {
      int daysTaken = 0;
      List <Assignment> currentAssignments = this.getAssignments();

      for (Assignment assignment : currentAssignments) {
        int startDate = assignment.getStartDay();
        int endDate = assignment.getEndDay();
        daysTaken = daysTaken + (endDate - startDate + 1);
      }

      return daysTaken;
  }
  
  // Method to count the number of days the guide is still available
  // @author Siger Ma
  
  public int availableForPeriod() {
    int numOfDaysAvailable = 0;
    int daysTaken = this.takenForPeriod();
    int numOfDaysInSeason = getDiveSafe().getNumDays();

    numOfDaysAvailable = numOfDaysInSeason - daysTaken;
    return numOfDaysAvailable;
  }

  // Method for the guides to be booked and be assigned to members
  // @author Siger Ma

  public void doBookGuide() {
    List<Member> currentMembers = getDiveSafe().getMembers();
    for (Member member : currentMembers) {
      member.assign(this);
    }
  }

}

class Member {
  MemberStatus {
    Unassigned {
      assign (Guide guide) [doAssign(guide)] -> Assigned;
    }
    Assigned {
      confirmPayment -> Paid;
      startTrip -> Banned;
      finishTrip -> Assigned;
      cancelTrip -> Cancelled;
    }
    Paid {
      startTrip -> Started;
      finishTrip -> Paid;
      cancelTrip -> Cancelled;
    }
    Started {
      finishTrip -> Finished;
      confirmPayment -> Started;
      cancelTrip -> Cancelled;
    }
    Finished{
      confirmPayment -> Finished;
      startTrip(int day) -> Finished;
      cancelTrip -> Finished;
    }
    Banned{
      confirmPayment -> Banned;
      startTrip(int day) -> Banned;
      cancelTrip -> Banned;
      finishTrip -> Banned;
    }

    Cancelled{
      confirmPayment -> Cancelled;
      startTrip -> Cancelled;
      finishTrip -> Cancelled;
    }
  }

  // public boolean doStart(int day) { 
  //   Assignment assignment =  diveSafe.getAssignment(this);

  //   List <Member> currentMemberList = diveSafe.getMembers();
  //   for (Member member : currentMemberList) { 
  //     if(member.getAssignment.getStartDay == day) { 
  //       return true;
  //     }
  //   }
  // return false;
  // }

  // public boolean doBan(){

  // }

  // Method for the members to be assigned to their schedule and to their guide if they asked for one.
  // @author Siger Ma
  // @param guide Guide to be assigned to the member if he asked for one
  
  public boolean doAssign(Guide guide) {
    int numDaysRequest = this.getNumDays();
    boolean needGuide = this.getGuideRequired();
    if (!needGuide) {
      diveSafe.addAssignment(1, numDaysRequest, this);
      return true;
    } else {
      if (numDaysRequest <= guide.availableForPeriod()) {
        Assignment assignment = diveSafe.addAssignment(guide.takenForPeriod() + 1, guide.takenForPeriod() + numDaysRequest, this);
        assignment.setGuide(guide);
        return true;
      }
    }
    return false;
  }

}
